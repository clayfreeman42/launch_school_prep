
While loops - continue until a condition is met
Beware infinite loops

let counter = 1;
while (counter <= 10) {
  console.log(counter);
  counter += 1;
}

> let a = 3
> a *= 4            // 3 * 4
= 12

> a /= 6            // 12 / 6
= 2

> a -= 2            // 2 - 2
= 0

******************
Increment/decrement by 1

let a = 1
a++ // returns 1 but changes a to 2

a = 1
++a // returns 2 and changes a to 2

a--
--a

Many developers recommend instead using += to be more clear, except in a for loop:

for (var index = 0; index < 5; ++index) {
  // body of loop
}

** iterate over an array's elements using a 'while' 
let names = ['Chris', 'Kevin', 'Naveed', 'Pete', 'Victor'];
let upperNames = [];
let index = 0;

while (index < names.length) {
  let upperCaseName = names[index].toUpperCase();
  upperNames.push(upperCaseName);
  index += 1;
}

console.log(upperNames); // => ['CHRIS', 'KEVIN', 'NAVEED', 'PETE', 'VICTOR']


*********************************************
** While

let names = ['Chris', 'Kevin', 'Naveed', 'Pete', 'Victor'];
let upperNames = [];
let index = 0;

while (index < names.length) {
  let upperCaseName = names[index].toUpperCase();
  upperNames.push(upperCaseName);
  index += 1;
}

console.log(upperNames); // => ['CHRIS', 'KEVIN', 'NAVEED', 'PETE', 'VICTOR']


*******************************************
** Do/While
let answer;
do {
  answer = prompt("Do you want to do that again?");
} while (answer === 'y');


*******************************************
** For 

for (initialization; condition; increment) {
  // loop body
}

**
let names = ['Chris', 'Kevin', 'Naveed', 'Pete', 'Victor'];
let upperNames = [];

for (let index = 0; index < names.length; index += 1) {
  let upperCaseName = names[index].toUpperCase();
  upperNames.push(upperCaseName);
}

console.log(upperNames); // => ['CHRIS', 'KEVIN', 'NAVEED', 'PETE', 'VICTOR']


********************************************
** Controlling Loops

** continue - jump to the next iteration of the loop


let names = ['Chris', 'Kevin', 'Naveed', 'Pete', 'Victor'];
let upperNames = [];

for (let index = 0; index < names.length; index += 1) {
  if (names[index] === 'Naveed') continue;

  let upperCaseName = names[index].toUpperCase();
  upperNames.push(upperCaseName);
}

console.log(upperNames); // => ['CHRIS', 'KEVIN', 'PETE', 'VICTOR']

NOTE: you should normally use blocks with if statements, but it makes for cleaner 
code with continue, break, and return.


** break
terminates the loop

let array = [3, 1, 5, 9, 2, 6, 4, 7]
let indexOfFive = -1;

for (let i = 0; i < array.length; i += 1) {
  if (array[i] === 5) {
    indexOfFive = i;
    break;
  }
}

console.log(indexOfFive);


*****************************************
** Array Iteration Methods

** foreach

let names = ['Chris', 'Kevin', 'Naveed', 'Pete', 'Victor'];

names.forEach(function(name) {
  console.log(name);
});

NOTE: Anonymous function passed as an argument 
Automatically invoked

js has first-class functions - functions are values

IMPORTANT: forEach must have a function passed to it!

Concise example:
let names = ['Chris', 'Kevin', 'Naveed', 'Pete', 'Victor'];

names.forEach(name => console.log(name));


******************************************
** Recursion

Recursive functions are functions that call themselves.

Such code doesn't look much like a loop, but there's a close relationship between 
loops and recursion. The relationship is close enough that we say that recursion 
is another way to create loops in JavaScript.

function doubler(number) {
  console.log(number);

  if (number <= 50) {
    doubler(number * 2);
  }
}

doubler(5);


** complex example

function fibonacci(number) {
  if (number < 2) return number; // 0 if number is 0, 1 if number is 1
  return fibonacci(number - 1) + fibonacci(number - 2);
}

console.log(fibonacci(6));  // => 8
console.log(fibonacci(20)); // => 6765


Every recursive function has a baseline condition that marks the end of the recursion 
(number < 2 in our code) and some code that recursively calls the function with a new 
argument. In most cases, the baseline condition returns a concrete value that gets 
reused as the code "unwinds" the recursive calls. Each unwind step uses the previous 
return value(s) to calculate an intermediate result that gets returned in the next step. 
In our example, the last step evaluates f(6) as f(5) + f(4) which yields 8.